{"ast":null,"code":"var _jsxFileName = \"/home/taka/Desktop/project/frontend/src/components/Chat.js\",\n  _s = $RefreshSig$();\n// src/components/Chat.js\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport contactService from \"../services/contactService\"; // Where you fetch contacts\n\n// Adjust the URL/port to match your backend\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\");\nfunction Chat() {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  useEffect(() => {\n    // 1. Fetch your list of contacts (or all users if you prefer)\n    async function fetchContacts() {\n      try {\n        const data = await contactService.getContacts();\n        // Adjust this if your backend returns data differently\n        setContacts(data.contacts || data);\n      } catch (err) {\n        console.error(\"Error fetching contacts\", err);\n      }\n    }\n    fetchContacts();\n  }, []);\n  useEffect(() => {\n    // 2. Listen for incoming messages\n    socket.on(\"receiveMessage\", messageData => {\n      // If the message is for the currently selected contact (or from them), add it to the conversation\n      if (messageData.sender.id === (selectedContact === null || selectedContact === void 0 ? void 0 : selectedContact._id) || messageData.recipient.id === (selectedContact === null || selectedContact === void 0 ? void 0 : selectedContact._id)) {\n        setMessages(prev => [...prev, messageData]);\n      }\n    });\n    return () => {\n      socket.off(\"receiveMessage\");\n    };\n  }, [selectedContact]);\n  const handleSelectContact = async contact => {\n    setSelectedContact(contact);\n    setMessages([]);\n    // Optionally fetch existing messages between currentUser and this contact\n    // e.g., using an HTTP endpoint: GET /api/messages/:contactId\n  };\n  const handleSendMessage = e => {\n    e.preventDefault();\n    if (!newMessage.trim() || !selectedContact) return;\n\n    // Example: replace \"currentUserId\" with your real user ID from auth\n    const sender = \"currentUserId\";\n    const recipient = selectedContact._id;\n    socket.emit(\"sendMessage\", {\n      sender,\n      recipient,\n      content: newMessage\n    });\n    setNewMessage(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"200px\",\n        marginRight: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), contacts.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          cursor: \"pointer\",\n          margin: \"5px 0\",\n          fontWeight: (selectedContact === null || selectedContact === void 0 ? void 0 : selectedContact._id) === contact._id ? \"bold\" : \"normal\"\n        },\n        onClick: () => handleSelectContact(contact),\n        children: contact.email\n      }, contact._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Direct Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), selectedContact ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            border: \"1px solid #ccc\",\n            padding: \"10px\",\n            height: \"300px\",\n            overflowY: \"scroll\"\n          },\n          children: messages.map((msg, index) => {\n            var _msg$sender;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [(_msg$sender = msg.sender) === null || _msg$sender === void 0 ? void 0 : _msg$sender.id, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this), \" \", msg.content]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSendMessage,\n          style: {\n            marginTop: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your message...\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value),\n            style: {\n              width: \"70%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            style: {\n              marginLeft: \"5px\"\n            },\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a contact to start messaging\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"MhT7N6qu1lY14oAiUBYENjjTjFY=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","io","contactService","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","Chat","_s","contacts","setContacts","selectedContact","setSelectedContact","messages","setMessages","newMessage","setNewMessage","fetchContacts","data","getContacts","err","console","error","on","messageData","sender","id","_id","recipient","prev","off","handleSelectContact","contact","handleSendMessage","e","preventDefault","trim","emit","content","style","display","children","width","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","map","cursor","margin","fontWeight","onClick","email","flex","border","padding","height","overflowY","msg","index","_msg$sender","onSubmit","marginTop","type","placeholder","value","onChange","target","marginLeft","_c","$RefreshReg$"],"sources":["/home/taka/Desktop/project/frontend/src/components/Chat.js"],"sourcesContent":["// src/components/Chat.js\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport contactService from \"../services/contactService\"; // Where you fetch contacts\n\n// Adjust the URL/port to match your backend\nconst socket = io(\"http://localhost:5000\");\n\nfunction Chat() {\n  const [contacts, setContacts] = useState([]);\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  useEffect(() => {\n    // 1. Fetch your list of contacts (or all users if you prefer)\n    async function fetchContacts() {\n      try {\n        const data = await contactService.getContacts();\n        // Adjust this if your backend returns data differently\n        setContacts(data.contacts || data);\n      } catch (err) {\n        console.error(\"Error fetching contacts\", err);\n      }\n    }\n    fetchContacts();\n  }, []);\n\n  useEffect(() => {\n    // 2. Listen for incoming messages\n    socket.on(\"receiveMessage\", (messageData) => {\n      // If the message is for the currently selected contact (or from them), add it to the conversation\n      if (\n        (messageData.sender.id === selectedContact?._id ||\n          messageData.recipient.id === selectedContact?._id)\n      ) {\n        setMessages((prev) => [...prev, messageData]);\n      }\n    });\n\n    return () => {\n      socket.off(\"receiveMessage\");\n    };\n  }, [selectedContact]);\n\n  const handleSelectContact = async (contact) => {\n    setSelectedContact(contact);\n    setMessages([]);\n    // Optionally fetch existing messages between currentUser and this contact\n    // e.g., using an HTTP endpoint: GET /api/messages/:contactId\n  };\n\n  const handleSendMessage = (e) => {\n    e.preventDefault();\n    if (!newMessage.trim() || !selectedContact) return;\n\n    // Example: replace \"currentUserId\" with your real user ID from auth\n    const sender = \"currentUserId\";\n    const recipient = selectedContact._id;\n\n    socket.emit(\"sendMessage\", { sender, recipient, content: newMessage });\n    setNewMessage(\"\");\n  };\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      {/* Left side: contact list */}\n      <div style={{ width: \"200px\", marginRight: \"20px\" }}>\n        <h3>Contacts</h3>\n        {contacts.map((contact) => (\n          <div\n            key={contact._id}\n            style={{\n              cursor: \"pointer\",\n              margin: \"5px 0\",\n              fontWeight: selectedContact?._id === contact._id ? \"bold\" : \"normal\"\n            }}\n            onClick={() => handleSelectContact(contact)}\n          >\n            {contact.email}\n          </div>\n        ))}\n      </div>\n\n      {/* Right side: direct messages */}\n      <div style={{ flex: 1 }}>\n        <h2>Direct Messages</h2>\n        {selectedContact ? (\n          <>\n            <div\n              style={{\n                border: \"1px solid #ccc\",\n                padding: \"10px\",\n                height: \"300px\",\n                overflowY: \"scroll\"\n              }}\n            >\n              {messages.map((msg, index) => (\n                <div key={index}>\n                  <strong>{msg.sender?.id}:</strong> {msg.content}\n                </div>\n              ))}\n            </div>\n            <form onSubmit={handleSendMessage} style={{ marginTop: \"10px\" }}>\n              <input\n                type=\"text\"\n                placeholder=\"Type your message...\"\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                style={{ width: \"70%\" }}\n              />\n              <button type=\"submit\" style={{ marginLeft: \"5px\" }}>\n                Send\n              </button>\n            </form>\n          </>\n        ) : (\n          <p>Select a contact to start messaging</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}